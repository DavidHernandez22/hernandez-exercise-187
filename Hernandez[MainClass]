//AUTHOR: DavidHernandez
//COURSE: CPT 187
//PURPOSE: To check the records of the store and to check the inventory to see if an item is in stock or not
//STARTDATE: 4/19/2022
package edu.cpt187.hernandez.exercise6;

import java.util.Scanner;
//Start of Main Class
public class MainClass 
{
	//Constants
	public static final char[] MENU_CHARS={'A', 'B', 'Q'};
	public static final String[] MENU_OPTIONS={"Login", "Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS={'A', 'B', 'R'};
	public static final String[] FILE_MENU_OPTIONS={"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS={'A', 'B', 'C', 'D'};
	public static final String INVENTORY_FILE_NAME="MasterInventory.File.dat";
	public static final String ACCOUNTS_FILE_NAME="MasterUserFile.dat";
	//end of Constants
	//Start of Main Method
	public static void main(String[] args) 
	{
		Inventory currentInventory=new Inventory();
		Order currentOrder=new Order();
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		UserAccounts currentUser=new UserAccounts(ACCOUNTS_FILE_NAME);
		Scanner input=new Scanner(System.in);
		//Variables
		String userName="";
		char menuSelection=' ';
		//end of Variables
		displayWelcomeBanner();
		menuSelection=validateMenuSelection(input);
		//while menuSelection is not Q
		while(menuSelection!='Q')
		{
			currentUser.setUserAccountArrays();
			userName=getUserName(input);
			//Test if menuSelection is not A
			if(menuSelection != 'A')
			{
				currentUser.setSearchedIndex(userName);
				//Test if getSearchedIndex >= 0
				if(currentUser.getSearchedIndex() >= 0)
				{
					displayAccountResults(userName);
				}//End of Test if getSearchedIndex >= 0
				//Else for Test if getSearchedIndex >= 0
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));
					displayAccountResults();
				}//End of Else for Test if getSearchedIndex >= 0
			}//End of Test if menuSelection is not A
			//Else for Test if menuSelection is not A
			else
			{
				currentUser.setSearchedIndex(userName, getPassword(input));
				
				//Test if getSearchedIndex < 0
				if(currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();
				}//End of Test if getSearchedIndex < 0
				//Else for Test if getSearchedIndex < 0
				else
				{
					menuSelection=validateFileSelection(input);
					//While menuSelection != R
					while(menuSelection!='R')
					{
						//Test if menuSelection is A
						if(menuSelection == 'A')
						{
							currentInventory.setLoadItems(getFileName(input));
							//Test if getSearchedIndex <= 0
							if(currentInventory.getRecordCount() <= 0)
							{
								displayFileError();
							}//End of Test if getSearchedIndex <= 0
							//Else for Test if getSearchedIndex <= 0
							else
							{
								displayRecordReport(currentInventory.getRecordCount());
							}//End of Else for Test if getSearchedIndex <= 0
						}//End of Test if menuSelection is A
						//Else for Test if menuSelection is A
						else
						{
							currentInventory.setSearchIndex(validateSearchValue(input));
							//Test if getSearchedIndex < 0
							if(currentInventory.getItemSearchIndex() < 0)
							{
								displayNotFound();
							}//End of Test if getSearchedIndex < 0
							//Else for Test if getSearchedIndex < 0
							else
							{
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemID(currentInventory.getItemIDs());
								currentOrder.setItemName(currentInventory.getItemNames());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setHowMany(validateHowMany(input));
								//Test if getInStockCount is < getHowMany
								if(currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{
									displayOutOfStock();
								}//End of Test if getInStockCount is < getHowMany
								//Else for Test if getInStockCount is < getHowMany
								else
								{
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									currentOrder.setDecreaseInStock(currentInventory);
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());
									//Test if getDiscountRate > 0.0
									if(currentOrder.getDiscountRate()>0.0)
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(), currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//End of Test if getDiscountRate > 0.0
									//Else for Test if getDiscountRate > 0.0
									else
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//End of Else for Test if getDiscountRate > 0.0
								}//End of Else for Test if getInStockCount is < getHowMany
							}//End of Else for Test if getSearchedIndex < 0
						}//End of Else for Test if menuSelection is A
						menuSelection=validateFileSelection(input);
					}//End of While menuSelection != R
				}//End of Else for Test if getSearchedIndex < 0
			}//End of Else for Test if menuSelection is not A
			menuSelection= validateMenuSelection(input);
		}//End of while menuSelection is not Q
		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());
		//Test if getRecordCount is > 0
		if(orders.getRecordCount()>0)
		{
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());
		}//End of Test if getRecordCount is > 0
		displayFarewellMessage();
		input.close();
	}
	//Start of Void Methods
	//display welcome banner method
	public static void displayWelcomeBanner()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Welcome to the Get-Ya-Sod Program MK4,");
		System.out.println("this program contains promps in which you will ");
		System.out.println("select your membership and item that has been searched");
		System.out.println("whihc you chose to purchase and a receipt will");
		System.out.println("be shown that gives you your total");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//end of display welcome banner method
	//display farewell message method
	public static void displayFarewellMessage()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Thank you for using the Get-ya-Sod program MK4.");
		System.out.println("Have a wonderful Day!");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//end of display farewell message method
	//Beginning of Main menu method
	public static void displayMainMenu()
	{
		int localIndex=0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("MAIN MENU");
		//print loop for main menu
		while(localIndex < MENU_OPTIONS.length)
		{
			System.out.printf("%-2s%2s%1s%1s\n", MENU_CHARS[localIndex], "for", "", MENU_OPTIONS[localIndex]);
			localIndex++;
		}//End of Print loop for main menu
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}//end of Main menu method
	//Beginning of File menu method
	public static void displayFileMenu()
	{
		int localIndex=0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE MENU");
		//print loop for File menu
		while(localIndex < FILE_MENU_OPTIONS.length)
		{
			System.out.printf("%-2s%2s%1s%1s\n", FILE_MENU_CHARS[localIndex], "for", "", FILE_MENU_OPTIONS[localIndex]);
			localIndex++;
		}//End of Print loop for File menu
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}//end of File menu method
	//Beginning of Discount Menu
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		int localIndex=0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("DISCOUNT MENU");
		//print loop for discount menu
		while(localIndex<borrowedDiscountNames.length)
		{
			System.out.printf("%-1s%1s%1s%1s%1s%9s%1.1f%2s\n", SUB_MENU_CHARS[localIndex], "", "for", "", borrowedDiscountNames[localIndex], "", borrowedDiscountRates[localIndex]*100, "%");
			localIndex++;
		}//end of print loop for discount menu
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		//menu selection
		System.out.print("Enter your selection here: ");
	}//end of Discount Menu
	//Beginning of display Account Results method
	public static void displayAccountResults()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of display Account Results method
	//Beginning of display Account Results method
	public static void displayAccountResults(String borrowedUserName)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.printf("%-1s%1s%1s\n","Account not created: username, ", borrowedUserName, ", already exists");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of display Account Results method
	//Beginning of display login error method
	public static void displayLoginError()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of display login error method
	//display record report method
	public static void displayRecordReport(int borrowedRecordCount)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("RECORD REPORT");
		System.out.printf("%1s%1s", borrowedRecordCount, " records processed");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of display Out of Stock method
	//display Out of Stock method
	public static void displayOutOfStock()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of display Out of Stock method
	//display file error method
	public static void displayFileError()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of display file error method
	//display not found error method
	public static void displayNotFound()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//End of display not found error method
	//Beginning of order report
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-10s%11s%1s\n", "Customer Name:", "", borrowedUserName);
		System.out.println("");
		System.out.printf("%-10s%15s%1s\n", "Item Name:", "", borrowedItemName);
		System.out.printf("%-11s%15s%1s%5.2f\n", "Item Price:", "$", "", borrowedItemPrice);
		System.out.println("");
		System.out.printf("%-14s%11s%1s\n", "Discount Name:", "", borrowedDiscountName);
		System.out.printf("%-14s%18.1f%2s\n", "Discount Rate:", borrowedDiscountRate*100, "%");
		System.out.printf("%-16s%10s%1s%5.2f\n", "Discount Amount:", "$", "", borrowedDiscountAmt);
		System.out.printf("%-15s%11s%1s%5.2f\n", "Discount Price:", "$", "", borrowedDiscountPrice);
		System.out.println("");
		System.out.printf("%-9s%18s%1d\n", "Quantity:", "", borrowedHowMany);
		System.out.println("");
		System.out.printf("%-9s%17s%1s%4.2f\n", "Subtotal:", "$", "", borrowedSubTotal);
		System.out.printf("%-8s%18s%1.1f%1s\n", "Tax Rate:", "", borrowedTaxRate*100, "%");
		System.out.printf("%-3s%22s%1s%4.2f\n", "Tax:", "$", "", borrowedTaxAmt);
		System.out.printf("%-12s%14s%1s%5.2f\n", "Order Total:", "$", "", borrowedTotalCost);
		System.out.println("");
		System.out.printf("%-6s%19s%1s\n", "Prize:", "", borrowedPrizeName);
		System.out.println("");
		System.out.printf("%1s%1d%1s\n", "Buy more now: Only ", borrowedInStockCounts, " left in stock!");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//end of order report
	//Beginning of order report
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-10s%11s%1s\n", "Customer Name:", "", borrowedUserName);
		System.out.println("");
		System.out.printf("%-10s%15s%1s\n", "Item Name:", "", borrowedItemName);
		System.out.printf("%-11s%15s%1s%5.2f\n", "Item Price:", "$", "", borrowedItemPrice);
		System.out.println("");
		System.out.printf("%-9s%18s%1d\n", "Quantity:", "", borrowedHowMany);
		System.out.println("");
		System.out.printf("%-9s%17s%1s%4.2f\n", "Subtotal:", "$", "", borrowedSubTotal);
		System.out.printf("%-8s%18s%1.1f%1s\n", "Tax Rate:", "", borrowedTaxRate*100, "%");
		System.out.printf("%-3s%22s%1s%4.2f\n", "Tax:", "$", "", borrowedTaxAmt);
		System.out.printf("%-12s%14s%1s%5.2f\n", "Order Total:", "$", "", borrowedTotalCost);
		System.out.println("");
		System.out.printf("%-6s%19s%1s\n", "Prize:", "", borrowedPrizeName);
		System.out.println("");
		System.out.printf("%1s%1d%1s\n", "Buy more now: Only ", borrowedInStockCounts, " left in stock!");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//end of order report
	//Beginning of Display Final Report
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities, double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal)
	{
		int localIndex=0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FINAL REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-2s%6s%10s%12s%8s\n", "ID", "NAME", "PRICE", "QTY", "TOTAL");
		while(localIndex < borrowedRecordCount)
		{
			System.out.printf("%-2d%2s%1s%6s%8.2f%5s%1d%5s%8.2f\n", borrowedItemIDs[localIndex], "", borrowedItemNames[localIndex], "$", borrowedItemPrices[localIndex], "",borrowedOrderQuantities[localIndex], "$", borrowedOrderTotals[localIndex]);
			localIndex++;
		}
		System.out.println("");
		System.out.println("GRAND TOTAL");
		System.out.printf("%-1s%8.2f\n", "$", borrowedGrandTotal);
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//end of Display Final Report
	//End of Void Methods
	
	//Start VR Methods
	//validate menu Selection method
	public static char validateMenuSelection(Scanner borrowedInput)
	{
		char localSelection=' ';
			
		displayMainMenu();
			
		localSelection=borrowedInput.next().toUpperCase().charAt(0);
		//while main menu selection loop with error message
		while (localSelection!=MENU_CHARS[0] && localSelection!=MENU_CHARS[1] && localSelection!=MENU_CHARS[2])
		{
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("The selection made is invalid. Please try again");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
				
			displayMainMenu();
				
			localSelection=borrowedInput.next().toUpperCase().charAt(0);
		}//end of while main menu selection loop with error message
		return localSelection;
	}//end of validate menu Selection method
	//validate FIleSelection method
	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection=' ';
		
		displayMainMenu();
			
		localSelection=borrowedInput.next().toUpperCase().charAt(0);
		//while FIleSelection loop with error message
		while (localSelection!=FILE_MENU_CHARS[0] && localSelection!=FILE_MENU_CHARS[1] && localSelection!=FILE_MENU_CHARS[2])
		{
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("The selection made is invalid. Please try again");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
				
			displayMainMenu();
				
			localSelection=borrowedInput.next().toUpperCase().charAt(0);
		}//end of while FIleSelection loop with error message
		return localSelection;
	}//end of validate FIleSelection method
	//get user name method
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName="";
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your username: ");
		localUserName=borrowedInput.next();
		return localUserName;
	}//end of get user name method
	//get Password method
	public static String getPassword(Scanner borrowedInput)
	{
		String localUserName="";
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your password: ");
		localUserName=borrowedInput.next();
		return localUserName;
	}//end of get Password method
	//get file name method
	public static String getFileName(Scanner borrowedInput)
	{
		String localFileName="";
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the file name with extension(i.e.file.txt): ");
		localFileName=borrowedInput.next();
		return localFileName;
	}//end of get file name method
	//validate search value method
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSearchValue=0;
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the search value: ");
		localSearchValue=borrowedInput.nextInt();
		//while how many repetition loop with error message
		while (localSearchValue<0)
		{
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("The value entered is invalid. Please try again");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.print("Enter the search value: ");
			localSearchValue=borrowedInput.nextInt();
		}//end of while how many repetition loop with error message
		return localSearchValue;
	}//End of validate search value method
	//validate Discount Menu method
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		char localSelection=' ';
			
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			
		localSelection=borrowedInput.next().toUpperCase().charAt(0);
		//while discount menu selection loop with error message
		while (localSelection!=SUB_MENU_CHARS[0] && localSelection!=SUB_MENU_CHARS[1] && localSelection!=SUB_MENU_CHARS[2] && localSelection!=SUB_MENU_CHARS[3])
		{
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("The selection made is invalid. Please try again");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
				
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
				
			localSelection=borrowedInput.next().toUpperCase().charAt(0);
		}//end of while discount menu selection loop with error message
		return localSelection;
	}//end of validate discount menu method
	//validate how many method
	public static String validateHowMany(Scanner borrowedInput)
	{
		String localHowMany="";
		System.out.print("Enter number of items: ");
		localHowMany=borrowedInput.next();
		//while how many repetition loop with error message
		while (Integer.parseInt(localHowMany)<=0)
		{
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("The value entered is invalid. Please try again");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.print("Enter number of items: ");
			localHowMany=borrowedInput.next();
		}//end of while how many repetition loop with error message
		return localHowMany;
	}//validate how many method
	//End of VR Methods
}//End of Main Class
